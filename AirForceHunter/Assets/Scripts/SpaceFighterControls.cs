//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/InputControls/SpaceFighterControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SpaceFighterControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SpaceFighterControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SpaceFighterControls"",
    ""maps"": [
        {
            ""name"": ""SpaceFighter"",
            ""id"": ""fd01573e-8dd1-4b1c-bfb9-6638a007e8ed"",
            ""actions"": [
                {
                    ""name"": ""Fly"",
                    ""type"": ""Value"",
                    ""id"": ""0837b538-8084-4125-bcce-37f7e5e349c3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""1d763fba-9042-40d5-904e-e2af5910664c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""97c4a065-5853-436a-9e01-d80d1e5fb2b6"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""LeftRight"",
                    ""id"": ""7dce61a4-f16c-434c-a019-8fc811b05fdd"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fly"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5a20a1fb-abb5-4d6b-9f11-08e0638b138a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fly"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d8c4a069-c73c-40b3-af25-c968b5ad6d8e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fly"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""LeftRightArrows"",
                    ""id"": ""d11a9b45-23a6-4036-9546-bbb5e4703c94"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fly"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6a9d751e-0a75-4140-8156-5ed5d85e9fcf"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fly"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fc46b9ee-c617-4a33-8b57-ecf24abcfcb7"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fly"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SpaceFighter
        m_SpaceFighter = asset.FindActionMap("SpaceFighter", throwIfNotFound: true);
        m_SpaceFighter_Fly = m_SpaceFighter.FindAction("Fly", throwIfNotFound: true);
        m_SpaceFighter_Fire = m_SpaceFighter.FindAction("Fire", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SpaceFighter
    private readonly InputActionMap m_SpaceFighter;
    private List<ISpaceFighterActions> m_SpaceFighterActionsCallbackInterfaces = new List<ISpaceFighterActions>();
    private readonly InputAction m_SpaceFighter_Fly;
    private readonly InputAction m_SpaceFighter_Fire;
    public struct SpaceFighterActions
    {
        private @SpaceFighterControls m_Wrapper;
        public SpaceFighterActions(@SpaceFighterControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Fly => m_Wrapper.m_SpaceFighter_Fly;
        public InputAction @Fire => m_Wrapper.m_SpaceFighter_Fire;
        public InputActionMap Get() { return m_Wrapper.m_SpaceFighter; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpaceFighterActions set) { return set.Get(); }
        public void AddCallbacks(ISpaceFighterActions instance)
        {
            if (instance == null || m_Wrapper.m_SpaceFighterActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SpaceFighterActionsCallbackInterfaces.Add(instance);
            @Fly.started += instance.OnFly;
            @Fly.performed += instance.OnFly;
            @Fly.canceled += instance.OnFly;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
        }

        private void UnregisterCallbacks(ISpaceFighterActions instance)
        {
            @Fly.started -= instance.OnFly;
            @Fly.performed -= instance.OnFly;
            @Fly.canceled -= instance.OnFly;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
        }

        public void RemoveCallbacks(ISpaceFighterActions instance)
        {
            if (m_Wrapper.m_SpaceFighterActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISpaceFighterActions instance)
        {
            foreach (var item in m_Wrapper.m_SpaceFighterActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SpaceFighterActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SpaceFighterActions @SpaceFighter => new SpaceFighterActions(this);
    public interface ISpaceFighterActions
    {
        void OnFly(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
    }
}
